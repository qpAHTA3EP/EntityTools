using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace EntityTools.Tools.Reflection
{
    /// <summary>
    /// Фабрика функторов, предоставляющих метод доступа к статическим методам классов
    /// </summary>
    public static class StaticMethodInvokerFactoryOld
    {
        public static StaticMethodInvoker<ReturnT> GetInvoker<ReturnT>(this Type containerType, string methodName, Type[] argumentTypes, BindingFlags flags = BindingFlags.Default)
        {
            return (new StaticMethodInvoker<ReturnT>(containerType, methodName, argumentTypes, flags));
        }

        public static Func<ReturnT> GetFunctor<ReturnT>(this Type containerType, string methodName, Type[] argumentTypes, BindingFlags flags = BindingFlags.Default)
        {
            return (new StaticMethodInvoker<ReturnT>(containerType, methodName, argumentTypes, flags)).Invoke;
        }

        public static StaticMethodInvoker<ReturnT> GetInvoker<ReturnT, ArgumentT1>(this Type containerType, string methodName, BindingFlags flags = BindingFlags.Default)
        {
            return new StaticMethodInvoker<ReturnT>(containerType, methodName, 
                            new Type[] { typeof(ArgumentT1)}, flags);
        }
        public static Func<ArgumentT1, ReturnT> GetStaticMethod<ArgumentT1, ReturnT>(this Type containerType, string methodName, BindingFlags flags = BindingFlags.Default)
        {
            return (new StaticMethodInvoker<ReturnT>(containerType, methodName, 
                new Type[] { typeof(ArgumentT1) }, flags)).Invoke;
        }

        public static StaticMethodInvoker<ReturnT> GetInvoker<ReturnT, ArgumentT1, ArgumentT2>(this Type containerType, string methodName, BindingFlags flags = BindingFlags.Default)
        {
            return new StaticMethodInvoker<ReturnT>(containerType, methodName, 
                            new Type[] { typeof(ArgumentT1), typeof(ArgumentT2) }, flags);
        }

        public static StaticMethodInvoker<ReturnT> GetInvoker<ReturnT, ArgumentT1, ArgumentT2, ArgumentT3>(this Type containerType, string methodName, BindingFlags flags = BindingFlags.Default)
        {
            return new StaticMethodInvoker<ReturnT>(containerType, methodName, 
                            new Type[] { typeof(ArgumentT1), typeof(ArgumentT2), typeof(ArgumentT3) }, 
                            flags);
        }

        public static StaticMethodInvoker<ReturnT> GetInvoker<ReturnT, ArgumentT1, ArgumentT2, ArgumentT3, ArgumentT4>(this Type containerType, string methodName, BindingFlags flags = BindingFlags.Default)
        {
            return new StaticMethodInvoker<ReturnT>(containerType, methodName, 
                            new Type[] { typeof(ArgumentT1), typeof(ArgumentT2), typeof(ArgumentT3), typeof(ArgumentT4) }, 
                            flags);
        }

        public static StaticMethodInvoker<ReturnT> GetInvoker<ReturnT, ArgumentT1, ArgumentT2, ArgumentT3, ArgumentT4, ArgumentT5>(this Type containerType, string methodName, BindingFlags flags = BindingFlags.Default)
        {
            return new StaticMethodInvoker<ReturnT>(containerType, methodName, 
                         new Type[] { typeof(ArgumentT1), typeof(ArgumentT1), typeof(ArgumentT2), typeof(ArgumentT3), typeof(ArgumentT4), typeof(ArgumentT5) }, 
                        flags);
        }

        public static StaticVoidMethodInvoker GetVoidInvoker(this Type containerType, string methodName, Type[] argumentTypes, BindingFlags flags = BindingFlags.Default)
        {
            return new StaticVoidMethodInvoker(containerType, methodName, argumentTypes, flags);
        }

        public static StaticVoidMethodInvoker GetVoidInvoker<ArgumentT1>(this Type containerType, string methodName, BindingFlags flags = BindingFlags.Default)
        {
            return new StaticVoidMethodInvoker(containerType, methodName,
                            new Type[] { typeof(ArgumentT1) }, flags);
        }

        public static StaticVoidMethodInvoker GetVoidInvoker<ArgumentT1, ArgumentT2>(this Type containerType, string methodName, BindingFlags flags = BindingFlags.Default)
        {
            return new StaticVoidMethodInvoker(containerType, methodName,
                            new Type[] { typeof(ArgumentT1), typeof(ArgumentT2) }, flags);
        }

        public static StaticVoidMethodInvoker GetVoidInvoker<ArgumentT1, ArgumentT2, ArgumentT3>(this Type containerType, string methodName, BindingFlags flags = BindingFlags.Default)
        {
            return new StaticVoidMethodInvoker(containerType, methodName,
                            new Type[] { typeof(ArgumentT1), typeof(ArgumentT2), typeof(ArgumentT3) },
                            flags);
        }

        public static StaticVoidMethodInvoker GetVoidInvoker<ArgumentT1, ArgumentT2, ArgumentT3, ArgumentT4>(this Type containerType, string methodName, BindingFlags flags = BindingFlags.Default)
        {
            return new StaticVoidMethodInvoker(containerType, methodName,
                            new Type[] { typeof(ArgumentT1), typeof(ArgumentT2), typeof(ArgumentT3), typeof(ArgumentT4) },
                            flags);
        }

        public static StaticVoidMethodInvoker GetVoidInvoker<ArgumentT1, ArgumentT2, ArgumentT3, ArgumentT4, ArgumentT5>(this Type containerType, string methodName, BindingFlags flags = BindingFlags.Default)
        {
            return new StaticVoidMethodInvoker(containerType, methodName,
                         new Type[] { typeof(ArgumentT1), typeof(ArgumentT1), typeof(ArgumentT2), typeof(ArgumentT3), typeof(ArgumentT4), typeof(ArgumentT5) },
                        flags);
        }
    }

    /// <summary>
    /// Класс вызова статического метода, возвращающего значение
    /// </summary>
    /// <typeparam name="ReturnType"></typeparam>
    public class StaticMethodInvoker<ReturnType>
    {
        private Type containerType;
        private MethodInfo method;
        //private List<object> defaultParameters;
        private object[] defaultParameters;

        public StaticMethodInvoker(Type t, string methodName, Type[] argumentTypes, BindingFlags flags = BindingFlags.Default)
        {
            if (string.IsNullOrEmpty(methodName))
                throw new ArgumentException("Method name is invalid");

            if (flags == BindingFlags.Default)
                flags = ReflectionHelper.DefaultFlags;

            if (argumentTypes == null)
                argumentTypes = new Type[] { };

            if (!Initialize(t, methodName, argumentTypes, flags | BindingFlags.Static | BindingFlags.NonPublic))
            {
                containerType = null;
                method = null;
            }
        }

        /// <summary>
        /// Инициализация полей, необходимых для работы со свойством
        /// Поиск метода производится с учетом аргументов
        /// </summary>
        /// <param name="t"></param>
        /// <param name="methodName"></param>
        /// <param name="argumentTypes"></param>
        /// <param name="flags"></param>
        /// <returns></returns>
        private bool Initialize(Type t, string methodName, Type[] argumentTypes, BindingFlags flags)
        {
            bool result = false;
            if (t != null)
            {
                method = t.GetMethod(methodName, flags, null, argumentTypes, null);
                if (method != null)
                {
                    if (method.ReturnType.Equals(typeof(ReturnType)))
                    {
                        var defParamsInfo = method.GetParameters();
                        if (defParamsInfo.Length > 0)
                        {
                            //defaultParameters = new List<object>(defParamsInfo.Length);
                            //foreach (var param in defParamsInfo)
                            //    defaultParameters.Add(param.DefaultValue);
                            defaultParameters = new object[defParamsInfo.Length];
                            for (int i = 0; i < defParamsInfo.Length; i++)
                                defaultParameters[i] = defParamsInfo[i].DefaultValue;
                        }
                        containerType = t;
                        return result = true;
                    }
                    else
                    {
                        containerType = null;
                        method = null;
                        return result;
                    }
                }
                return Initialize(t.BaseType, methodName, argumentTypes, flags);
            }
            return result;
        }
        /// <summary>
        /// Инициализация полей, необходимых для работы со свойством
        /// Поиск метода производится по имени без учета аргументов 
        /// </summary>
        /// <param name="t"></param>
        /// <param name="methodName"></param>
        /// <param name="flags"></param>
        /// <returns></returns>
        private bool Initialize(Type t, string methodName, BindingFlags flags)
        {
            bool result = false;
            if (t != null)
            {
                method = t.GetMethod(methodName, flags);
                if (method != null)
                {
                    if (method.ReturnType.Equals(typeof(ReturnType)))
                    {
                        var defParamsInfo = method.GetParameters();
                        if (defParamsInfo.Length > 0)
                        {
                            //defaultParameters = new List<object>(defParamsInfo.Length);
                            //foreach (var param in defParamsInfo)
                            //    defaultParameters.Add(param.DefaultValue);
                            defaultParameters = new object[defParamsInfo.Length];
                            for (int i = 0; i < defParamsInfo.Length; i++)
                                defaultParameters[i] = defParamsInfo[i].DefaultValue;
                        }
                        containerType = t;
                        return result = true;
                    }
                    else
                    {
                        containerType = null;
                        method = null;
                        return result;
                    }
                }
                return Initialize(t.BaseType, methodName, flags);
            }
            return result;
        }

        public bool IsValid()
        {
            return containerType != null && method != null;
        }

        public ReturnType Invoke()
        {
            object[] parameters = new object[defaultParameters.Length];
            if (defaultParameters.Length > 0)
                defaultParameters.CopyTo(parameters, 0);

            object result = method.Invoke(null, parameters);
            if (result != null)
                return (ReturnType)result;
            else return default(ReturnType);
        }
        public ReturnType Invoke<A>(A a)
        {
            object[] parameters = new object[defaultParameters.Length];
            parameters[0] = a;
            if (defaultParameters.Length > 1)
                defaultParameters.CopyTo(parameters, 1);

            object result = method.Invoke(null, parameters);
            if (result != null)
                return (ReturnType)result;
            else return default(ReturnType);
        }
        public ReturnType Invoke<A, B>(A a, B b)
        {
            object[] parameters = new object[defaultParameters.Length];
            parameters[0] = a;
            parameters[1] = b;
            if (defaultParameters.Length > 2)
                defaultParameters.CopyTo(parameters, 2);

            object result = method.Invoke(null, parameters);
            if (result != null)
                return (ReturnType)result;
            else return default(ReturnType);
        }
        public ReturnType Invoke<A, B, C>(A a, B b, C c)
        {
            object[] parameters = new object[defaultParameters.Length];
            parameters[0] = a;
            parameters[1] = b;
            parameters[2] = c;
            if (defaultParameters.Length > 3)
                defaultParameters.CopyTo(parameters, 3);

            object result = method.Invoke(null, parameters);
            if (result != null)
                return (ReturnType)result;
            else return default(ReturnType);
        }
        public ReturnType Invoke<A, B, C, D>(A a, B b, C c, D d)
        {
            object[] parameters = new object[defaultParameters.Length];
            parameters[0] = a;
            parameters[1] = b;
            parameters[2] = c;
            parameters[3] = d;
            if (defaultParameters.Length > 4)
                defaultParameters.CopyTo(parameters, 4);

            object result = method.Invoke(null, parameters);
            if (result != null)
                return (ReturnType)result;
            else return default(ReturnType);
        }
        public ReturnType Invoke<A, B, C, D, E>(A a, B b, C c, D d, E e)
        {
            object[] parameters = new object[defaultParameters.Length];
            parameters[0] = a;
            parameters[1] = b;
            parameters[2] = c;
            parameters[3] = d;
            parameters[4] = e;
            if (defaultParameters.Length > 5)
                defaultParameters.CopyTo(parameters, 5);

            object result = method.Invoke(null, parameters);
            if (result != null)
                return (ReturnType)result;
            else return default(ReturnType);
        }
        public ReturnType Invoke<A, B, C, D, E, F>(A a, B b, C c, D d, E e, F f)
        {
            object[] parameters = new object[defaultParameters.Length];
            parameters[0] = a;
            parameters[1] = b;
            parameters[2] = c;
            parameters[3] = d;
            parameters[4] = e;
            parameters[5] = f;
            if (defaultParameters.Length > 6)
                defaultParameters.CopyTo(parameters, 6);

            object result = method.Invoke(null, parameters);
            if (result != null)
                return (ReturnType)result;
            else return default(ReturnType);
        }
    }

    /// <summary>
    /// Класс вызова статического метода, возвращающего значение
    /// </summary>
    public class StaticVoidMethodInvoker
    {
        private Type containerType;
        private MethodInfo method;
        //private List<object> defaultParameters;
        private object[] defaultParameters;

        public StaticVoidMethodInvoker(Type t, string methodName, Type[] argumentTypes, BindingFlags flags = BindingFlags.Default)
        {
            if (string.IsNullOrEmpty(methodName))
                throw new ArgumentException("Method name is invalid");

            if (flags == BindingFlags.Default)
                flags = ReflectionHelper.DefaultFlags;

            if (argumentTypes == null)
                argumentTypes = new Type[] { };

            if (!Initialize(t, methodName, argumentTypes, flags | BindingFlags.Static | BindingFlags.NonPublic))
            {
                containerType = null;
                method = null;
            }
        }

        /// <summary>
        /// Инициализация полей, необходимых для работы со свойством
        /// Поиск метода производится с учетом аргументов
        /// </summary>
        /// <param name="t"></param>
        /// <param name="methodName"></param>
        /// <param name="argumentTypes"></param>
        /// <param name="flags"></param>
        /// <returns></returns>
        private bool Initialize(Type t, string methodName, Type[] argumentTypes, BindingFlags flags)
        {
            bool result = false;
            if (t != null)
            {
                method = t.GetMethod(methodName, flags, null, argumentTypes, null);
                if (method != null)
                {
                    var defParamsInfo = method.GetParameters();
                    if (defParamsInfo.Length > 0)
                    {
                        //defaultParameters = new List<object>(defParamsInfo.Length);
                        //foreach (var param in defParamsInfo)
                        //    defaultParameters.Add(param.DefaultValue);
                        defaultParameters = new object[defParamsInfo.Length];
                        for (int i = 0; i < defParamsInfo.Length; i++)
                            defaultParameters[i] = defParamsInfo[i].DefaultValue;
                    }
                    containerType = t;
                    return result = true;
                }
                return Initialize(t.BaseType, methodName, argumentTypes, flags);
            }
            return result;
        }
        /// <summary>
        /// Инициализация полей, необходимых для работы со свойством
        /// Поиск метода производится по имени без учета аргументов 
        /// </summary>
        /// <param name="t"></param>
        /// <param name="methodName"></param>
        /// <param name="flags"></param>
        /// <returns></returns>
        private bool Initialize(Type t, string methodName, BindingFlags flags)
        {
            bool result = false;
            if (t != null)
            {
                method = containerType.GetMethod(methodName, flags);
                if (method != null)
                {
                    var defParamsInfo = method.GetParameters();
                    if (defParamsInfo.Length > 0)
                    {
                        //defaultParameters = new List<object>(defParamsInfo.Length);
                        //foreach (var param in defParamsInfo)
                        //    defaultParameters.Add(param.DefaultValue);
                        defaultParameters = new object[defParamsInfo.Length];
                        for (int i = 0; i < defParamsInfo.Length; i++)
                            defaultParameters[i] = defParamsInfo[i].DefaultValue;
                    }
                    containerType = t;
                    return result = true;
                }
                return Initialize(t.BaseType, methodName, flags);
            }
            return result;
        }

        public bool IsValid()
        {
            return containerType != null && method != null && defaultParameters != null;
        }

        public void Invoke()
        {
            object[] parameters = new object[defaultParameters.Length];
            if (defaultParameters.Length > 0)
                defaultParameters.CopyTo(parameters, 0);
            method.Invoke(null, parameters);
        }
        public void Invoke<A>(A a)
        {
            object[] parameters = new object[defaultParameters.Length];
            parameters[0] = a;
            if (defaultParameters.Length > 1)
                defaultParameters.CopyTo(parameters, 1);

            method.Invoke(null, parameters);
        }
        public void Invoke<A, B>(A a, B b)
        {
            object[] parameters = new object[defaultParameters.Length];
            parameters[0] = a;
            parameters[1] = b;
            if (defaultParameters.Length > 2)
                defaultParameters.CopyTo(parameters, 2);

            method.Invoke(null, parameters);
        }
        public void Invoke<A, B, C>(A a, B b, C c)
        {
            object[] parameters = new object[defaultParameters.Length];
            parameters[0] = a;
            parameters[1] = b;
            parameters[2] = c;
            if (defaultParameters.Length > 3)
                defaultParameters.CopyTo(parameters, 3);

            method.Invoke(null, parameters);
        }
        public void Invoke<A, B, C, D>(A a, B b, C c, D d)
        {
            object[] parameters = new object[defaultParameters.Length];
            parameters[0] = a;
            parameters[1] = b;
            parameters[2] = c;
            parameters[3] = d;
            if(defaultParameters.Length > 4)
                defaultParameters.CopyTo(parameters, 4);

            method.Invoke(null, parameters);
        }
        public void Invoke<A, B, C, D, E>(A a, B b, C c, D d, E e)
        {
            object[] parameters = new object[defaultParameters.Length];
            parameters[0] = a;
            parameters[1] = b;
            parameters[2] = c;
            parameters[3] = d;
            parameters[4] = e;
            if (defaultParameters.Length > 5)
                defaultParameters.CopyTo(parameters, 5);

            method.Invoke(null, parameters);
        }
        public void Invoke<A, B, C, D, E, F>(A a, B b, C c, D d, E e, F f)
        {
            object[] parameters = new object[defaultParameters.Length];
            parameters[0] = a;
            parameters[1] = b;
            parameters[2] = c;
            parameters[3] = d;
            parameters[4] = e;
            parameters[5] = f;
            if (defaultParameters.Length > 6)
                defaultParameters.CopyTo(parameters, 6);

            method.Invoke(null, parameters);
        }
    }
}
